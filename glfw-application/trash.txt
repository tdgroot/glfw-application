static const struct
{
	float x, y, z;
	float r, g, b;
	float t0, t1;
} vertices[12] =
{
	{ -0.3f, -0.3f, 0.6f,	1.f, 0.f, 0.f,		0.0f, 0.0f, }, // Left
	{  0.3f, -0.3f, 0.6f,	0.0f, 1.0f, 0.f,	1.0f, 0.0f }, // Right
	{   0.f,  0.3f, 0.3f,	0.0f, 0.0f, 1.0f,	1.0f, 1.0f }, // Top
	{   0.f, -0.3f, 0.0f,	1.f, 1.f, 0.f,		0.0f, 1.0f }, // Back
};

static unsigned int indices[] = {
	0, 1, 2,
	1, 3, 2,
	3, 0, 2,
	0, 1, 3
};


VertexArray va;
VertexBuffer vb(vertices, sizeof(vertices));

VertexBufferLayout layout;
layout.push<float>(3); // vertex xyz
layout.push<float>(3); // vertex rgb
layout.push<float>(2); // vertex t1t2
va.add_buffer(vb, layout);

IndexBuffer ib(indices, 12);

Shader shader("shader/shader.vert", "shader/shader.frag");
shader.bind();
	
Texture texture("res/image.png");
texture.bind();
shader.set_uniform1i("u_Texture", 0);

// Unbind vertex array, vertex buffer, index buffer and shader.
va.unbind();
vb.unbind();
ib.unbind();
shader.unbind();

bool show_demo_window = false;
float x_a = 0;
float x_b = 0;
glm::vec3 translation_a(0, 0, 0);
glm::vec3 translation_b(0, 0, 0);


float ratio;
int width, height;

glfwGetFramebufferSize(window, &width, &height);
ratio = width / (float)height;

glViewport(0, 0, width, height);

shader.bind();

// Initialize and calculate MVP (model view protection) matrix.
// Model: translation, rotation and scale of object in space.
// View: the view of the camera.
// Projection: the projection matrix of our window

glm::mat4 proj = glm::ortho(-ratio, ratio, -1.0f, 1.0f, 1.0f, -1.0f);
glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0, 0, 0));

{
	glm::mat4 model = glm::translate(glm::mat4(1.0f), translation_a);
	model = glm::rotate(model, (float)glfwGetTime()*1.5f, glm::vec3(1, 0, 0));
	model = glm::rotate(model, (float)glfwGetTime(), glm::vec3(0, 0, 1));

	glm::mat4 mvp = proj * view * model;
	shader.set_uniform_mat4f("MVP", 1, mvp);

	renderer.draw(va, ib, shader);
}

{
	glm::mat4 model = glm::translate(glm::mat4(1.0f), translation_b);
	model = glm::rotate(model, (float)glfwGetTime()*1.5f, glm::vec3(1, 0, 0));
	model = glm::rotate(model, (float)glfwGetTime(), glm::vec3(0, 0, 1));

	glm::mat4 mvp = proj * view * model;
	shader.set_uniform_mat4f("MVP", 1, mvp);

	renderer.draw(va, ib, shader);
}

// ImGui demo window.
if (show_demo_window)
	ImGui::ShowDemoWindow(&show_demo_window);

// Render ImGui main window.
{
	static float f = 0.0f;

	ImGui::Begin("Hello, world!");

	ImGui::SliderFloat3("Translation A", &translation_a.x, -1.0f, 1.0f);
	ImGui::SliderFloat3("Translation B", &translation_b.x, -1.0f, 1.0f);
	ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);

	ImGui::End();
}